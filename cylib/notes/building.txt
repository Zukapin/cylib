Build details
update dx bindings to https://github.com/orgs/terrafx/packages
update bepuphus to v2

TODO: 
	- Upgrade font support
		- Add additional unicode points https://blog.hypersect.com/improving-the-font-pipeline/
		- Need to upgrade the sdf rendering, can use multiple channels and probably get the anti-aliasing a little Less Dumb (Could stack fonts in different channels for extra terrible)


Building using this library:
If you're starting a new project, the easiest way is to use the CoreTest project as a base.
	- Clone the cylib, bepuphysics2, and sdl repos into the same base folder.
	- Run coretest -- if this doesn't work (*cough* Visual Studio), rebuild the individual projects and then try again. May have to (re)build cylib first, then coretest.
	- The first build will take awhile as the assets are generated -- this build step is cached, so further builds should be fast.
	- If you want your own project/solution/repo, copy the CoreTest folder and fix the paths inside of the coretest.csproj file.

For moving an existing project, or debugging build problems:
	- Your .csproj file will need something like:
		  <ItemGroup>
			<ProjectReference Include="..\cylib\cylib.csproj" />
		  </ItemGroup>

		  <ItemGroup>
			<CyContent Include="Content\**" />
		  </ItemGroup>

		  <Target Name="ContentBuild" BeforeTargets="PreBuildEvent">
			<Exec Command="dotnet run --project $(ProjectDir)..\cyasset --input=@(CyContent) --output=$(OutputPath)coretest.blob --coretest" />
		  </Target>
	- The reference to the cylib project can be just the dll -- but you must also copy the cylibassets.blob into your output directory.
	- All the content you want put into the asset blob must be in the CyContent ItemGroup (When adding new items with VS, check to make sure it didn't auto-remove it)
	- The --coretest argument should be replaced with anything unique per project, so the content pipeline can keep the intermediate content items separate
	- For more details on the content pipeline, see the content notes.


Dependencies are split into library and build. Library dependencies are required at runtime on the client computer. Build dependencies are only required for development.

Library Dependencies:
.NET 5.0
	- Updated 8/31/2020
	- From https://github.com/dotnet/core
	- Using RC1
	- Requires the latest VS 2019 Preview to work with VS

SDL2 
	- Updated 8/31/2020
	- Used as the base window manager and image loader, since .NET Core doesn't have the Windows bindings that .NET Framework used to have
	- C# bindings from https://github.com/flibitijibibo/SDL2-CS
		- git cloned into SDL2-CS folder, using the Core.csproj
		- dll's are in the cylib project, set to copy-if-newer into the base directory, using some magic. Should support switching to different dlls for different builds (eg non-windows)
	- SDL2 dlls are in the SDL2-Lib directory in the cylib folder
	- Base SDL2 dlls from https://www.libsdl.org/download-2.0.php
	- SDL2_image dlls from https://www.libsdl.org/projects/SDL_image/
		- requires libjpeg, libpng, zlib, sdl2_image -- all with licenses.
	- non-windows binaries not supported, need a test machine

BepuUtilities
	- Updated 8/31/2020
	- Used for Matrix for Cameras, basically? Whatevs

SharpDX
	- Updated ?
	- Used for DX11 bindings -- switching to https://github.com/orgs/terrafx/packages soon™

Build Dependencies:
SDL2
	- See Lib Dependencies
	- Only kinda-sorta needs SDL_image to write out debug images -- could do without

SharpFont
	- Updated 8/31/2020
	- using the nuget package https://www.nuget.org/packages/SharpFontStandard/
	- which is a .NET Core version of https://github.com/Robmaister/SharpFont
	- which is C# bindings for FreeType
	- depends on old version of freetype (newer versions *do* crash, enjoy) found at https://github.com/Robmaister/SharpFont.Dependencies
		- DLL in the base build tool directory, set to copy-if-newer
	- SDL_ttf is *not* a replacement because its hella busted (no kerning information, or really any supporting info, just render to sdlSurface)
